RDB的优点
1. RDB是Redis数据的非常紧凑的单文件时间点表示。RDB文件非常适合备份。
   例如，您可能希望将最近24小时内的RDB文件每小时归档一次，并且每天保存RDB快照30天。这使您可以在发生灾难时轻松恢复不同版本的数据集。
2. RDB非常适合灾难恢复，可以将单个紧凑文件传输到远端数据中心或Amazon S3（可能已加密）。
3. RDB最大限度地提高了Redis的性能，因为Redis父进程为了坚持而需要做的唯一工作是分配一个将完成所有其余工作的孩子。父实例永远不会执行磁盘I / O或类似操作。
4. 与AOF相比，RDB允许使用大数据集更快地重新启动。

RDB的缺点
1. 如果您需要在Redis停止工作时（例如断电后）尽量减少数据丢失的可能性，那么RDB就不太好。
   您可以配置生成RDB的不同保存点（例如，在对数据集进行至少五分钟和100次写入之后，您可以拥有多个保存点）。
   但是，您通常每五分钟或更长时间创建一个RDB快照，因此如果Redis因任何原因停止工作而没有正确关闭，您应该准备丢失最新的数据分钟。
2. 为了使用子进程在磁盘上保留RDB，RDB需要经常fork（）。
   如果数据集很大，Fork（）会很费时，并且可能导致Redis在几毫秒内停止服务客户端，或者如果数据集非常大并且CPU性能不佳，甚至会持续一秒。AOF也需要fork（），
   但是你可以调整你想要重写日志的频率，而不必考虑耐久性。

AOF的优势
1. 使用AOF Redis更持久：您可以使用不同的fsync策略：根本没有fsync，每秒fsync，每次查询都有fsync。
   使用fsync的默认策略，每秒写入性能仍然很好（fsync使用后台线程执行，主线程将在没有fsync正在进行时努力执行写入。）但是您只能丢失一秒的写入。
2. AOF日志只能追加日志，因此如果发生停电，则无法查找，也不会出现腐败问题。即使日志由于某种原因（磁盘已满或其他原因）以半写命令结束，redis-check-aof工具也可以轻松修复它。
3. 当Redis太大时，Redis能够在后台自动重写AOF。重写是完全安全的，因为在Redis继续附加到旧文件时，会创建一个全新的文件，
   并创建当前数据集所需的最少操作集，一旦准备好第二个文件，Redis将切换两个文件并开始追加到新的那一个。
4. AOF以容易理解和解析的格式一个接一个地包含所有操作的日志。您甚至可以轻松导出AOF文件。
   例如，即使您使用FLUSHALL命令刷新了所有错误，如果在此期间没有执行日志重写，您仍然可以保存数据集，只需停止服务器，删除最新的命令，然后再次重新启动Redis。

AOF的缺点
1. AOF文件通常比相同数据集的等效RDB文件大。
2. 根据确切的fsync策略，AOF可能比RDB慢。通常将fsync设置为每秒性能仍然非常高，并且在禁用fsync的情况下，即使在高负载下，它也应该与RDB一样快。
   即使在写入负载很大的情况下，RDB仍然能够提供有关最大延迟的更多保证。
3. 在过去，我们遇到了特定命令中罕见的错误（例如有一个涉及阻塞命令，如BRPOPLPUSH），导致产生的AOF无法在重新加载时重现完全相同的数据集。
   这个bug很少见，我们在测试套件中进行了测试，自动创建随机复杂数据集并重新加载它们以检查一切正常，但这种类型的错误对于RDB持久性几乎是不可能的。
   为了使这一点更加清楚：Redis AOF的工作原理是增量更新现有的状态，比如MySQL或MongoDB，而RDB快照从头开始创建一次又一次，这在概念上更加健壮。但是 - 1）应该注意的是，
   每次AOF由Redis重写时，都会从数据集中包含的实际数据开始重新创建，与总是附加的AOF文件（或者重写旧的AOF而不是读取存储器中的数据）相比，对bug的抵抗力更强。2）
   我们从来没有从用户那里收到关于在现实世界中发现的AOF腐败的单一报告。