HBase是一种“NoSQL”数据库。“NoSQL”是一个通用术语，意味着数据库不是支持SQL作为主要访问语言的RDBMS，但是有许多类型的NoSQL数据库：BerkeleyDB是本地NoSQL数据库的一个例子，而HBase非常多分布数据库。从技术上讲，HBase实际上更像是“数据存储”而不是“数据库”，因为它缺少您在RDBMS中找到的许多功能，例如类型列，二级索引，触发器和高级查询语言等。

但是，HBase具有许多支持线性和模块化缩放的功能。HBase集群通过添加托管在商品类服务器上的RegionServers进行扩展。例如，如果一个集群从10个扩展到20个RegionServers，它在存储和处理能力方面都会翻倍。RDBMS可以很好地扩展，但只能达到一定程度 - 特别是单个数据库服务器的大小 - 并且为了获得最佳性能，需要专门的硬件和存储设备。HBase的特点是：

强大的一致读/写：HBase不是“最终一致”的DataStore。这使得它非常适合高速计数器聚合等任务。

自动分片：HBase表通过区域分布在群集上，并且随着数据的增长，区域会自动分割和重新分配。

自动RegionServer故障转移

Hadoop / HDFS集成：HBase支持HDFS作为其分布式文件系统。

MapReduce：HBase支持通过MapReduce进行大规模并行处理，将HBase用作源和接收器。

Java客户端API：HBase支持易于使用的Java API以进行编程访问。

Thrift / REST API：HBase还支持非Java前端的Thrift和REST。

块缓存和布隆过滤器：HBase支持块缓存和布隆过滤器，以实现高容量查询优化。

运营管理：HBase提供内置网页，以提供运营洞察力和JMX指标。



65.2。我什么时候应该使用HBase？
HBase并不适合所有问题。

首先，确保您有足够的数据。如果你有数亿或数十亿行，那么HBase是一个很好的候选者。如果你只有几千/百万行，那么使用传统的RDBMS可能是一个更好的选择，因为你的所有数据都可能在一个节点（或两个）上结束，而其余的集群可能正在等待闲。

其次，确保您可以在没有RDBMS提供的所有额外功能的情况下生存（例如，键入的列，二级索引，事务，高级查询语言等）。针对RDBMS构建的应用程序无法通过简单地更改“移植”到HBase例如，JDBC驱动程序。考虑从RDBMS转移到HBase作为完全重新设计而不是端口。

第三，确保你有足够的硬件。甚至HDFS也不适用于少于5个DataNode的任何东西（由于诸如HDFS块复制之类的东西，默认值为3），加上NameNode。

HBase可以在笔记本电脑上独立运行 - 但这应该只被视为开发配置。


65.3。HBase和Hadoop / HDFS有什么区别？
HDFS是一种分布式文件系统，非常适合存储大型文件。其文档声明它不是通用文件系统，并且不提供文件中的快速单个记录查找。
另一方面，HBase构建在HDFS之上，为大型表提供快速记录查找（和更新）。
这有时可能是一个概念混淆点。HBase内部将您的数据放在HDFS上存在的索引“StoreFiles”中，以进行高速查找。
有关HBase如何实现其目标的更多信息，请参阅数据模型和本章的其余部分。